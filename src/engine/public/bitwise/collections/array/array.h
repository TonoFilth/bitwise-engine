#pragma once

#include "bitwise/core/assert.h"
#include "bitwise/memory/allocator.h"
#include "bitwise/memory/global_allocators.h"

namespace bw
{
////////////////////////////////////////////////////////////////////////////////
/// \brief Brief description.
/// \todo Write brief description.
////////////////////////////////////////////////////////////////////////////////
template <typename T>
class Array
{
public:
    typedef T*       Iterator;      ///< TODO
    typedef const T* ConstIterator; ///< TODO

	////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
	Array();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
	explicit Array(size_t itemCapacity);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
	explicit Array(Allocator& allocator);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
	Array(Allocator& allocator, size_t itemCapacity);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Array(const Array& other);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Array(Array&& other);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Array& operator=(const Array& other);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
	~Array();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    T& operator[](size_t index);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    const T& operator[](size_t index) const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    void add(const T& item);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    void insert(size_t index, const T& item);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Iterator insert(Iterator it, const T& item);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    void remove(size_t index);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Iterator remove(Iterator it);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    void resize(size_t itemCount, const T value = T());

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    void reserve(size_t itemCapacity);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    size_t capacity() const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    size_t count() const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    bool empty() const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Iterator begin();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    ConstIterator begin() const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Iterator rbegin();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    ConstIterator rbegin() const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Iterator end();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    ConstIterator end() const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Iterator rend();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    ConstIterator rend() const;

private:
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    void lshift(size_t index);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    void lshift(Iterator it);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    void rshift(size_t index);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    void rshift(Iterator it);

    T*         m_array;     ///< TODO
    size_t     m_capacity;  ///< TODO
    size_t     m_count;     ///< TODO
    Allocator& m_allocator; ///< TODO
};

}	// namespace bw

#include "bitwise/collections/array/array.inl"

////////////////////////////////////////////////////////////////////////////////
/// \class bw::array
/// \ingroup collections
///
/// \details Detailed description.
/// \todo Write detailed description.
////////////////////////////////////////////////////////////////////////////////