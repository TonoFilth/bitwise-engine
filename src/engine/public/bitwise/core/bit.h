#pragma once

#include <type_traits>  // enable_if_t

#include "bitwise/core/macros.h"
#include "bitwise/core/assert.h"

namespace bw
{
////////////////////////////////////////////////////////////////////////////////
/// \brief Bit manipulation functions
////////////////////////////////////////////////////////////////////////////////
namespace bit
{
	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    template <typename T, typename = std::enable_if_t<std::is_integral<T>::value>>
    BW_FORCE_INLINE T mask(uint8_t bit);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    template <typename T, typename ...Args, typename = std::enable_if_t<std::is_integral<T>::value>>
    BW_INLINE T mask(uint8_t bit, Args&& ...args);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    template <typename T, typename = std::enable_if_t<std::is_integral<T>::value>>
    BW_FORCE_INLINE T set(T bits, uint8_t bit);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    template <typename T, typename = std::enable_if_t<std::is_integral<T>::value>>
    BW_FORCE_INLINE T unset(T bits, uint8_t bit);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    template <typename T, typename = std::enable_if_t<std::is_integral<T>::value>>
    BW_FORCE_INLINE T toggle(T bits, uint8_t bit);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    template <typename T, typename = std::enable_if_t<std::is_integral<T>::value>>
    BW_FORCE_INLINE T complement(T bits);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    template <typename T, typename = std::enable_if_t<std::is_integral<T>::value>>
    BW_FORCE_INLINE bool is_set(T bits, uint8_t bit);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    template <typename T, typename = std::enable_if_t<std::is_integral<T>::value>>
    BW_FORCE_INLINE void to_string(T bits, char* buffer, size_t bufferSize);

}   // namespace bit
}   // namespace bw

#include "bitwise/core/bit.inl"

////////////////////////////////////////////////////////////////////////////////
/// \namespace bw::bit
/// \ingroup core
///
/// \details Detailed description.
/// \todo Write detailed description.
////////////////////////////////////////////////////////////////////////////////