#pragma once

#if defined(BW_PLATFORM_ANDROID)
    #include <stdarg.h> // va_list
#else
    #include <cstdarg>  // va_list
#endif

#include "bitwise/core/macros.h"

namespace bw
{
////////////////////////////////////////////////////////////////////////////////
/// \brief Brief description.
/// \todo Write brief description.
////////////////////////////////////////////////////////////////////////////////
namespace cstring
{
	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API void copy(char* buffer, size_t bufferSize, const char* str);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API void concatenate(char* buffer, size_t bufferSize, const char* str);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_API bool contains(const char* str, const char needle);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_API bool contains(const char* str, const char* needle);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API bool equals(const char* str1, const char* str2);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API bool equals_ignore_case(const char* str1, const char* str2);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API size_t format(char* buffer, size_t bufferSize, const char* format, ...);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API size_t format_va_list(char* buffer, size_t bufferSize, const char* format, va_list args);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API size_t length(const char* str);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_API bool replace(char* str, char needle, char replacement);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_API size_t scan_format(const char* str, const char* format, ...);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_API size_t scan_format_va_list(const char* str, const char* format, va_list args);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_API bool starts_with(const char* str, const char needle);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_API bool starts_with(const char* str, const char* needle);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_API bool ends_with(const char* str, const char needle);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_API bool ends_with(const char* str, const char* needle);

	////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API void truncated_copy(char* buffer, size_t bufferSize, const char* str);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API void truncated_concatenate(char* buffer, size_t bufferSize, const char* str);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API size_t truncated_format(char* buffer, size_t bufferSize, const char* format, ...);

    ////////////////////////////////////////////////////////////////////////////
	/// \brief Brief description.
	/// \todo Write brief description.
	////////////////////////////////////////////////////////////////////////////
    BW_INLINE BW_API size_t truncated_format_va_list(char* buffer, size_t bufferSize, const char* format, va_list args);

}   // namespace cstring
}   // namespace bw

////////////////////////////////////////////////////////////////////////////////
/// \namespace bw::cstring
/// \ingroup core
///
/// \details Detailed description.
/// \todo Write detailed description.
////////////////////////////////////////////////////////////////////////////////