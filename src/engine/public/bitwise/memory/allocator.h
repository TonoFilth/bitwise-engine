#pragma once

#include <new>      // placement new
#include <utility>  // std::forward

#include "bitwise/core/macros.h"
#include "bitwise/core/integer.h"

namespace bw
{
////////////////////////////////////////////////////////////////////////////////
/// \brief Brief description.
/// \todo Write brief description.
////////////////////////////////////////////////////////////////////////////////
class BW_API Allocator
{
public:
	static const size_t kSizeNotTracked   = integer::max<size_t>();
    static const size_t kDefaultAlignment = 4;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Allocator() = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    virtual ~Allocator() = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Allocator(const Allocator& other) = delete;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    Allocator& operator=(const Allocator& other) = delete;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    virtual void* allocate(size_t size, size_t alignment = kDefaultAlignment) = 0;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    virtual void deallocate(void* memory) = 0;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    virtual size_t allocatedSize() const = 0;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    virtual size_t allocatedSize(void* memory) const = 0;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    template <class T, class ...Args>
    T* allocateObject(Args&& ...args);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Brief description.
    /// \todo Write brief description.
    ////////////////////////////////////////////////////////////////////////////
    template <class T>
    void deallocateObject(T* memory);
};

}   // namespace bw

#include "bitwise/memory/allocator.inl"

////////////////////////////////////////////////////////////////////////////////
/// \class bw::Allocator
/// \ingroup memory
///
/// \details Detailed description.
/// \todo Write detailed description.
////////////////////////////////////////////////////////////////////////////////