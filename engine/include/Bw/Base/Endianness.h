#ifndef BW_BASE_ENDIANESS_H
#define BW_BASE_ENDIANESS_H

#include "Bw/Base/AtomicTypes.h"
#include "Bw/Base/Preprocessor.h"
#include "Bw/Base/Export.h"

namespace bw
{

////////////////////////////////////////////////////////////////////////////////
// General purpose swap functions
////////////////////////////////////////////////////////////////////////////////
static BW_INLINE F32 SwapF32(F32 value);
static BW_INLINE F64 SwapF64(F64 value);

#include "Bw/Base/Inl/Endianness.inl"

}	// namespace bw

////////////////////////////////////////////////////////////////////////////////
// 16 bits integer swap
////////////////////////////////////////////////////////////////////////////////
#define BW_SWAP_16(value) \
 ((((value) >> 8) & 0x00FF) | (((value) << 8) & 0xFF00))

////////////////////////////////////////////////////////////////////////////////
// 32 bits integer swap
////////////////////////////////////////////////////////////////////////////////
#define BW_SWAP_32(value) \
 ( (((value) >> 24) & 0x000000FF) | (((value) >>  8) & 0x0000FF00) | \
   (((value) <<  8) & 0x00FF0000) | (((value) << 24) & 0xFF000000) )

////////////////////////////////////////////////////////////////////////////////
// 64 bits integer swap
////////////////////////////////////////////////////////////////////////////////
#define BW_SWAP_64(value) \
 ( (((value) >> 56) & 0x00000000000000FF) | (((value) >> 40) & 0x000000000000FF00) | \
   (((value) >> 24) & 0x0000000000FF0000) | (((value) >>  8) & 0x00000000FF000000) | \
   (((value) <<  8) & 0x000000FF00000000) | (((value) << 24) & 0x0000FF0000000000) | \
   (((value) << 40) & 0x00FF000000000000) | (((value) << 56) & 0xFF00000000000000) )

////////////////////////////////////////////////////////////////////////////////
// 32 & 64 bits floating point swap
////////////////////////////////////////////////////////////////////////////////
#define BW_SWAP_F32(value) bw::SwapF32(value)
#define BW_SWAP_F64(value) bw::SwapF64(value)

#endif	// BW_BASE_ENDIANESS_H